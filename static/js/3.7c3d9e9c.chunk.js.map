{"version":3,"sources":["components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteShow.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","quoteId","onAddComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addCommentHandler","useCallback","message","length","onClick","HighlightedQuote","quote","author","QuoteShow","getSingleQuote","loadedQuote","match","useRouteMatch","path","exact","to","url"],"mappings":"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","file":"static/js/3.7c3d9e9c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from 'react';\n\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { quoteId, onAddComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddComment();\n    }\n  }, [status, error, onAddComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    sendRequest({ quoteId: quoteId, commentData: { text: enteredText } });\n    // optional: Could validate here\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport NewCommentForm from './NewCommentForm';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\n\nimport classes from './Comments.module.css';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n    error,\n  } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n    setIsAddingComment(false);\n  }, [sendRequest, quoteId]);\n\n  let comments; // *************************************************\n\n  if (status === 'completed' && error) {\n    comments = (\n      <div className='centered'>\n        <p>{error.message || 'Something went wrong.'}</p>\n      </div>\n    );\n  }\n\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (\n    status === 'completed' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className='centered'>No one has commented yet!</p>;\n  }\n\n  if (status === 'completed' && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  // let comments; // *************************************************\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm onAddComment={addCommentHandler} quoteId={quoteId} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from 'react';\nimport { Route, useParams, Link, useRouteMatch } from 'react-router-dom';\n\nimport { getSingleQuote } from '../lib/api';\nimport useHttp from '../hooks/use-http';\n\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\nconst QuoteShow = () => {\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  const match = useRouteMatch();\n  const params = useParams();\n  const { quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className='centered focused'>\n        <p>{error}</p>\n      </div>\n    );\n  }\n\n  if (status === 'completed' && !loadedQuote.text) {\n    return (\n      <div className='centered'>\n        <p>No quote found </p>\n      </div>\n    );\n  }\n\n  return (\n    <section>\n      <HighlightedQuote author={loadedQuote.author} text={loadedQuote.text} />\n      {/* <Route path={`/quotes/${params.quoteId}/`} exact> */}\n      <Route path={match.path} exact>\n        <div className='centered'>\n          <Link className='btn--flat' to={`${match.url}/comments`}>\n            View Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </section>\n  );\n};\n\nexport default QuoteShow;\n"],"sourceRoot":""}